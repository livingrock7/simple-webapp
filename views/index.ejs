<% include _header %>

<div class="container" text-align="center">
    <h1>Transfer Birth Venue Digital Assets</h1>
</div>

    <div class="container">
        <fieldset>
          <form id="tokenTransferForm">
            <div>
              <label for="userAddress">
                <b>Recipient Address:</b>
              </label>
              <input id="userAddress" type="text" value="0x2e071D2966Aa7D8dECB1005885bA1977D6038A65" size="60" />
            </div>
            <br />
            <div>
              <label for="amount">
                <b>Amount of Security tokens:</b>
              </label>
              <input id="amount" type="number" value="100" size="7" />
            </div>
            <br />
            <input type="submit" value="Transfer" />
          </form>
        </fieldset>      
        
        <br />
        <div id="results"></div>

<% include _footer %>

<script>
  // Detect whether the current browser is ethereum-compatible,
  // and handle the case where it isn't:
  if (typeof window.ethereum === 'undefined') {
    alert('Looks like you need a Dapp browser to get started.')
    alert('Consider installing MetaMask!')

  } else {

  // In the case the user has MetaMask installed, you can easily
  // ask them to sign in and reveal their accounts:
  ethereum.enable()

  // Remember to handle the case they reject the request:
  .catch(function (reason) {
    if (reason === 'User rejected provider access') {
      // The user didn't want to sign in!
      alert('User denied access')
    } else {
      // This shouldn't happen, so you might want to log this...
      alert('There was an issue signing you in.')
    }
  })

  // In the case they approve the log-in request, you'll receive their accounts:
  .then(function (accounts) {
    // You also should verify the user is on the correct network:
    // if (ethereum.networkVersion !== desiredNetwork) {
    //   alert('This application requires the main network, please switch it in your MetaMask UI.')

    //   // We plan to provide an API to make this request in the near future.
    //   // https://github.com/MetaMask/metamask-extension/issues/3663
    // }

    // Once you have a reference to user accounts,
    // you can suggest transactions and signatures:
    const account = accounts[0]

    web3 = new Web3(ethereum);
  
  })
}
// define the ERC20 standard token ABI to interact with token contracts using
var simpleTokenAbi = [
	{
		"constant": true,
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "address",
				"name": "_spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "address",
				"name": "_from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "_to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "address",
				"name": "_spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_subtractedValue",
				"type": "uint256"
			}
		],
		"name": "decreaseApproval",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "address",
				"name": "_owner",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "balance",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "address",
				"name": "_to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "address",
				"name": "_spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_addedValue",
				"type": "uint256"
			}
		],
		"name": "increaseApproval",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"internalType": "address",
				"name": "_owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "_spender",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "symbol",
				"type": "string"
			},
			{
				"internalType": "uint8",
				"name": "decimals",
				"type": "uint8"
			},
			{
				"internalType": "uint256",
				"name": "totalSupply",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	}
];

$('#tokenTransferForm').submit(function (event) {
	// preventDefault on the submit event to prevent form from carrying out its default action
	
	event.preventDefault();
	// set our results div to show a loading status
  $('#results').html('loading...');
  
  var results = '';
	// create a web3 contract object with the ERC20 abi
	var tokenAddress = '0x07fca320e2e098b6fd24392036104e57120ce5e4';
	var token = web3.eth.contract(simpleTokenAbi).at(tokenAddress);
    token.transfer($('#userAddress').val(),$('#amount').val(),{
        from: window.web3.eth.accounts[0]
    },
    async (err, res) => {
        if (!err) {
          const receipt = await getTransactionReceipt(res);
          console.log(receipt);
          console.log(res);
          if(receipt.blockNumber != null)
          {
             results = 'transaction mined succesfully';
             console.log(results);
             $('#results').html(results);
        }
      }
    });
					
  
});

  getTransactionReceipt = async (hash) => {
        let receipt = null;
        while (receipt === null) {
          // we are going to check every second if transation is mined or not, once it is mined we'll leave the loop
          receipt = await getTransactionReceiptPromise(hash);
          setTimeout(function(){ console.log('Every second'); }, 1000);
        }
        return receipt;
      };

  getTransactionReceiptPromise = (hash) => {

        // here we just promisify getTransactionReceipt function for convenience

        return new Promise(((resolve, reject) => {
            window.web3.eth.getTransactionReceipt(hash, function(err, data) {
                if (err !== null) reject(err);
                else resolve(data);
            });
        }));
      }


</script>